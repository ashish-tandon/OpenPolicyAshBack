apiVersion: apps/v1
kind: Deployment
metadata:
  name: openpolicy
  labels:
    app: openpolicy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: openpolicy
  template:
    metadata:
      labels:
        app: openpolicy
    spec:
      containers:
      - name: openpolicy
        image: openpolicyacr.azurecr.io/openpolicy:latest
        ports:
        - containerPort: 80
          name: http
        - containerPort: 8000
          name: api
        - containerPort: 3000
          name: dashboard
        - containerPort: 5555
          name: flower
        - containerPort: 6379
          name: redis
        - containerPort: 5432
          name: postgres
        env:
        - name: DATABASE_URL
          value: "postgresql://openpolicy:openpolicy123@localhost:5432/opencivicdata"
        - name: REDIS_URL
          value: "redis://localhost:6379/0"
        - name: CORS_ORIGINS
          value: "https://openpolicy-app.azurecontainerapps.io,http://localhost:3000"
        - name: NODE_ENV
          value: "production"
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "4Gi"
            cpu: "2"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: regions-report
          mountPath: /app/regions_report.json
          subPath: regions_report.json
          readOnly: true
        - name: scrapers
          mountPath: /app/scrapers
          readOnly: true
        - name: policies
          mountPath: /app/policies
          readOnly: true
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: openpolicy-postgres-pvc
      - name: regions-report
        configMap:
          name: regions-report-config
      - name: scrapers
        configMap:
          name: scrapers-config
      - name: policies
        configMap:
          name: policies-config
---
apiVersion: v1
kind: Service
metadata:
  name: openpolicy-service
  labels:
    app: openpolicy
spec:
  selector:
    app: openpolicy
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: api
    port: 8000
    targetPort: 8000
    protocol: TCP
  - name: dashboard
    port: 3000
    targetPort: 3000
    protocol: TCP
  - name: flower
    port: 5555
    targetPort: 5555
    protocol: TCP
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP
  - name: postgres
    port: 5432
    targetPort: 5432
    protocol: TCP
  type: LoadBalancer
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: openpolicy-postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: managed-premium
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: regions-report-config
data:
  regions_report.json: |
    {
      "regions": [
        {
          "name": "Ontario",
          "jurisdictions": [
            {
              "name": "Toronto",
              "type": "city",
              "population": 2930000
            }
          ]
        }
      ]
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: scrapers-config
data:
  # Add your scraper configurations here
  config.json: |
    {
      "scrapers": {
        "ontario": {
          "enabled": true,
          "url": "https://www.ontario.ca"
        }
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: policies-config
data:
  # Add your policy configurations here
  policies.json: |
    {
      "policies": {
        "data_quality": {
          "enabled": true,
          "rules": []
        }
      }
    }
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: openpolicy-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: openpolicy-app.azure.com  # Replace with your domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: openpolicy-service
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: openpolicy-service
            port:
              number: 8000
      - path: /dashboard
        pathType: Prefix
        backend:
          service:
            name: openpolicy-service
            port:
              number: 3000
      - path: /flower
        pathType: Prefix
        backend:
          service:
            name: openpolicy-service
            port:
              number: 5555 